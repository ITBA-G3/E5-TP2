$date
	Wed Mar 26 21:01:47 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_decoder $end
$var wire 5 ! rs2Id [4:0] $end
$var wire 5 " rs1Id [4:0] $end
$var wire 5 # rdId [4:0] $end
$var wire 1 $ isStore $end
$var wire 1 % isSYSTEM $end
$var wire 1 & isLoad $end
$var wire 1 ' isLUI $end
$var wire 1 ( isJALR $end
$var wire 1 ) isJAL $end
$var wire 1 * isBranch $end
$var wire 1 + isAUIPC $end
$var wire 1 , isALUreg $end
$var wire 1 - isALUimm $end
$var wire 7 . funct7 [6:0] $end
$var wire 3 / funct3 [2:0] $end
$var wire 32 0 Uimm [31:0] $end
$var wire 32 1 Simm [31:0] $end
$var wire 32 2 Jimm [31:0] $end
$var wire 32 3 Iimm [31:0] $end
$var wire 32 4 Bimm [31:0] $end
$var reg 32 5 instr [31:0] $end
$scope module dut $end
$var wire 32 6 instr [31:0] $end
$var wire 5 7 rs2Id [4:0] $end
$var wire 5 8 rs1Id [4:0] $end
$var wire 5 9 rdId [4:0] $end
$var wire 1 $ isStore $end
$var wire 1 % isSYSTEM $end
$var wire 1 & isLoad $end
$var wire 1 ' isLUI $end
$var wire 1 ( isJALR $end
$var wire 1 ) isJAL $end
$var wire 1 * isBranch $end
$var wire 1 + isAUIPC $end
$var wire 1 , isALUreg $end
$var wire 1 - isALUimm $end
$var wire 7 : funct7 [6:0] $end
$var wire 3 ; funct3 [2:0] $end
$var wire 32 < Uimm [31:0] $end
$var wire 32 = Simm [31:0] $end
$var wire 32 > Jimm [31:0] $end
$var wire 32 ? Iimm [31:0] $end
$var wire 32 @ Bimm [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b1010 @
b1010 ?
b1010000000000001010 >
b1010 =
b101001010000000000000000 <
b0 ;
b0 :
b1010 9
b1010 8
b1010 7
b101001010000010100110011 6
b101001010000010100110011 5
b1010 4
b1010 3
b1010000000000001010 2
b1010 1
b101001010000000000000000 0
b0 /
b0 .
0-
1,
0+
0*
0)
0(
0'
0&
0%
0$
b1010 #
b1010 "
b1010 !
$end
#10000
0,
1-
b101001011000000000000000 0
b101001011000000000000000 <
b1011000000000001010 2
b1011000000000001010 >
b1011 "
b1011 8
b101001011000010100010011 5
b101001011000010100010011 6
#20000
0-
1*
b11111110000000000000000000000000 0
b11111110000000000000000000000000 <
b11111111111111111111111111100000 3
b11111111111111111111111111100000 ?
b11111111111111111111111111111101 1
b11111111111111111111111111111101 =
b11111111111111111111111111111100 4
b11111111111111111111111111111100 @
b11111111111100000000011111100000 2
b11111111111100000000011111100000 >
b0 "
b0 8
b0 !
b0 7
b11101 #
b11101 9
b1111111 .
b1111111 :
b11111110000000000000111011100011 5
b11111110000000000000111011100011 6
#30000
0*
1(
b1000000000000000 0
b1000000000000000 <
b0 3
b0 ?
b0 1
b0 =
b0 4
b0 @
b1000000000000000 2
b1000000000000000 >
b1 "
b1 8
b0 #
b0 9
b0 .
b0 :
b1000000001100111 5
b1000000001100111 6
#40000
0(
1)
b0 0
b0 <
b0 2
b0 >
b0 "
b0 8
b1101111 5
b1101111 6
#50000
0)
1+
b1010 1
b1010 =
b1010 4
b1010 @
b1010 #
b1010 9
b10100010111 5
b10100010111 6
#60000
0+
1'
b10010001101000101000000000000 0
b10010001101000101000000000000 <
b100100011 3
b100100011 ?
b100100000 1
b100100000 =
b100100000 4
b100100000 @
b1000101100100100010 2
b1000101100100100010 >
b1000 "
b1000 8
b11 !
b11 7
b0 #
b0 9
b101 /
b101 ;
b1001 .
b1001 :
b10010001101000101000000110111 5
b10010001101000101000000110111 6
#70000
