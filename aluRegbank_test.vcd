$comment Generated by Amaranth $end
$date 2025-05-06 00:56:22.462567 $end
$timescale 1 fs $end
$scope module bench $end
$scope module top $end
$var wire 32 ! reg_buses__rd_data $end
$var wire 32 " alu_buses__rd_data $end
$var wire 32 # alu_buses__rs1_data $end
$var wire 32 $ reg_buses__rs1_data $end
$var wire 32 % alu_buses__rs2_data $end
$var wire 32 & reg_buses__rs2_data $end
$scope module alu $end
$var wire 32 " alu_buses__rd_data $end
$var wire 32 # alu_buses__rs1_data $end
$var wire 32 % alu_buses__rs2_data $end
$var wire 1 M isALUreg $end
$var wire 1 N isALUimm $end
$var wire 1 O isAUIPC $end
$var wire 1 P isLUI $end
$var wire 1 Q isJAL $end
$var wire 1 R isJALR $end
$var wire 1 S isLoad $end
$var wire 1 T isStore $end
$var wire 3 U func3 $end
$var wire 7 V func7 $end
$var wire 5 W shamt $end
$upscope $end
$scope module regbank $end
$var wire 32 ! reg_buses__rd_data $end
$var wire 32 $ reg_buses__rs1_data $end
$var wire 32 & reg_buses__rs2_data $end
$var wire 5 ' rs1_addr $end
$var wire 32 ( $signal $end
$var wire 32 ) $signal$3 $end
$var wire 32 * $signal$4 $end
$var wire 32 + $signal$5 $end
$var wire 32 , $signal$6 $end
$var wire 32 - $signal$7 $end
$var wire 32 . $signal$8 $end
$var wire 32 / $signal$9 $end
$var wire 32 0 $signal$10 $end
$var wire 32 1 $signal$11 $end
$var wire 32 2 $signal$12 $end
$var wire 32 3 $signal$13 $end
$var wire 32 4 $signal$14 $end
$var wire 32 5 $signal$15 $end
$var wire 32 6 $signal$16 $end
$var wire 32 7 $signal$17 $end
$var wire 32 8 $signal$18 $end
$var wire 32 9 $signal$19 $end
$var wire 32 : $signal$20 $end
$var wire 32 ; $signal$21 $end
$var wire 32 < $signal$22 $end
$var wire 32 = $signal$23 $end
$var wire 32 > $signal$24 $end
$var wire 32 ? $signal$25 $end
$var wire 32 @ $signal$26 $end
$var wire 32 A $signal$27 $end
$var wire 32 B $signal$28 $end
$var wire 32 C $signal$29 $end
$var wire 32 D $signal$30 $end
$var wire 32 E $signal$31 $end
$var wire 32 F $signal$32 $end
$var wire 32 G $signal$33 $end
$var wire 5 H rs2_addr $end
$var wire 1 I clk $end
$var wire 1 J rst $end
$var wire 1 K we $end
$var wire 5 L rd_addr $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100 !
b100 "
b0 #
b0 $
b0 %
b0 &
b0 '
b0 (
b0 )
b0 *
b0 +
b0 ,
b0 -
b0 .
b0 /
b0 0
b0 1
b0 2
b0 3
b0 4
b0 5
b0 6
b0 7
b0 8
b0 9
b0 :
b0 ;
b0 <
b0 =
b0 >
b0 ?
b0 @
b0 A
b0 B
b0 C
b0 D
b0 E
b0 F
b0 G
b1 H
0I
0J
1K
b10 L
0M
0N
0O
0P
1Q
0R
0S
0T
b0 U
b0 V
b0 W
$end
#500000000
1I
b100 *
b10 '
b100 $
b100 #
b1000 "
b1000 !
#1000000000
0I
#1500000000
1I
b1000 *
b1000 $
b1000 #
b1100 "
b1100 !
#2000000000
0I
#2500000000
1I
b1100 *
b1100 $
b1100 #
b10000 "
b10000 !
#3000000000
0I
#3500000000
1I
b10000 *
b10000 $
b10000 #
b10100 "
b10100 !
#4000000000
0I
#4500000000
1I
b10100 *
b10100 $
b10100 #
b11000 "
b11000 !
#5000000000
0I
#5500000000
1I
b11000 *
b11000 $
b11000 #
b11100 "
b11100 !
#6000000000
0I
#6500000000
1I
b11100 *
b11100 $
b11100 #
b100000 "
b100000 !
#7000000000
0I
#7500000000
1I
b100000 *
b100000 $
b100000 #
b100100 "
b100100 !
#8000000000
0I
#8500000000
1I
b100100 *
b100100 $
b100100 #
b101000 "
b101000 !
#9000000000
0I
#9500000000
1I
b101000 *
b101000 $
b101000 #
b101100 "
b101100 !
#10000000000
