$comment Generated by Amaranth $end
$date 2025-06-25 21:18:29.443503 $end
$timescale 1 fs $end
$scope module bench $end
$scope module top $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 # pc_update__pc $end
$var wire 32 $ PC_out__pc $end
$var wire 32 % pc_in__pc $end
$var wire 32 & pc__pc $end
$var wire 32 ' instr__instr $end
$var wire 32 ( instr__instr$7 $end
$var wire 32 ) instr__instr$8 $end
$var wire 32 * imm_data_in__imm $end
$var wire 32 + imm_data__imm $end
$var wire 1 , instr_flags_in__isALUimm $end
$var wire 1 - alu_flags__isALUimm $end
$var wire 1 . instr_flags_in__isALUreg $end
$var wire 1 / alu_flags__isALUreg $end
$var wire 1 0 instr_flags_in__isAUIPC $end
$var wire 1 1 alu_flags__isAUIPC $end
$var wire 1 2 instr_flags_in__isBranch $end
$var wire 1 3 alu_flags__isBranch $end
$var wire 1 4 instr_flags_in__isJAL $end
$var wire 1 5 alu_flags__isJAL $end
$var wire 1 6 instr_flags_in__isJALR $end
$var wire 1 7 alu_flags__isJALR $end
$var wire 1 8 instr_flags_in__isLUI $end
$var wire 1 9 alu_flags__isLUI $end
$var wire 1 : instr_flags_in__isLoad $end
$var wire 1 ; alu_flags__isLoad $end
$var wire 1 < instr_flags_in__isStore $end
$var wire 1 = alu_flags__isStore $end
$var wire 1 > instr_flags__isALUimm $end
$var wire 1 ? instr_flags__isALUreg $end
$var wire 1 @ instr_flags__isAUIPC $end
$var wire 1 A instr_flags__isBranch $end
$var wire 1 B instr_flags__isJAL $end
$var wire 1 C instr_flags__isJALR $end
$var wire 1 D instr_flags__isLUI $end
$var wire 1 E instr_flags__isLoad $end
$var wire 1 F instr_flags__isStore $end
$var wire 1 G instr_flags_fetch__isALUimm $end
$var wire 1 H instr_flags_fetch__isALUreg $end
$var wire 1 I instr_flags_fetch__isAUIPC $end
$var wire 1 J instr_flags_fetch__isBranch $end
$var wire 1 K instr_flags_fetch__isJAL $end
$var wire 1 L instr_flags_fetch__isJALR $end
$var wire 1 M instr_flags_fetch__isLUI $end
$var wire 1 N instr_flags_fetch__isLoad $end
$var wire 1 O instr_flags_fetch__isStore $end
$var wire 5 P reg_address_in__rd_addr $end
$var wire 5 Q reg_addr__rd_addr $end
$var wire 5 R reg_address_in__rs1_addr $end
$var wire 5 S reg_addr__rs1_addr $end
$var wire 5 T reg_address_in__rs2_addr $end
$var wire 5 U reg_addr__rs2_addr $end
$var wire 5 V reg_addr_fetch__rd_addr $end
$var wire 5 W reg_addr_fetch__rs1_addr $end
$var wire 5 X reg_addr_fetch__rs2_addr $end
$var wire 3 Y alu_func_in__func3 $end
$var wire 3 Z functions__func3 $end
$var wire 7 [ alu_func_in__func7 $end
$var wire 7 \ functions__func7 $end
$var wire 1 ] branch_flags_in__beq $end
$var wire 1 ^ branch_flags__beq $end
$var wire 1 _ branch_flags_in__bge $end
$var wire 1 ` branch_flags__bge $end
$var wire 1 a branch_flags_in__bgeu $end
$var wire 1 b branch_flags__bgeu $end
$var wire 1 c branch_flags_in__blt $end
$var wire 1 d branch_flags__blt $end
$var wire 1 e branch_flags_in__bltu $end
$var wire 1 f branch_flags__bltu $end
$var wire 1 g branch_flags_in__bne $end
$var wire 1 h branch_flags__bne $end
$var wire 1 i instr_flags_in__isALUimm$72 $end
$var wire 1 j instr_flags_out__isALUimm $end
$var wire 1 k instr_flags_in__isALUreg$74 $end
$var wire 1 l instr_flags_out__isALUreg $end
$var wire 1 m instr_flags_in__isAUIPC$76 $end
$var wire 1 n instr_flags_out__isAUIPC $end
$var wire 1 o instr_flags_in__isBranch$78 $end
$var wire 1 p instr_flags_out__isBranch $end
$var wire 1 q instr_flags_in__isJAL$80 $end
$var wire 1 r instr_flags_out__isJAL $end
$var wire 1 s instr_flags_in__isJALR$82 $end
$var wire 1 t instr_flags_out__isJALR $end
$var wire 1 u instr_flags_in__isLUI$84 $end
$var wire 1 v instr_flags_out__isLUI $end
$var wire 1 w instr_flags_in__isLoad$86 $end
$var wire 1 x instr_flags_out__isLoad $end
$var wire 1 y instr_flags_in__isStore$88 $end
$var wire 1 z instr_flags_out__isStore $end
$var wire 1 { instr_flags__isALUimm$90 $end
$var wire 1 | instr_flags__isALUreg$91 $end
$var wire 1 } instr_flags__isAUIPC$92 $end
$var wire 1 ~ instr_flags__isBranch$93 $end
$var wire 1 !! instr_flags__isJAL$94 $end
$var wire 1 "! instr_flags__isJALR$95 $end
$var wire 1 #! instr_flags__isLUI$96 $end
$var wire 1 $! instr_flags__isLoad$97 $end
$var wire 1 %! instr_flags__isStore$98 $end
$var wire 1 &! instr_flags_decode__isALUimm $end
$var wire 1 '! instr_flags_decode__isALUreg $end
$var wire 1 (! instr_flags_decode__isAUIPC $end
$var wire 1 )! instr_flags_decode__isBranch $end
$var wire 1 *! instr_flags_decode__isJAL $end
$var wire 1 +! instr_flags_decode__isJALR $end
$var wire 1 ,! instr_flags_decode__isLUI $end
$var wire 1 -! instr_flags_decode__isLoad $end
$var wire 1 .! instr_flags_decode__isStore $end
$var wire 32 /! imm_data_in__imm$108 $end
$var wire 32 0! imm_data_out__imm $end
$var wire 32 1! imm_data__imm$110 $end
$var wire 3 2! alu_func_in__func3$111 $end
$var wire 3 3! alu_func_out__func3 $end
$var wire 7 4! alu_func_in__func7$113 $end
$var wire 7 5! alu_func_out__func7 $end
$var wire 5 6! reg_addr__rs1_addr$115 $end
$var wire 5 7! reg_address_out__rs1_addr $end
$var wire 5 8! reg_addr__rs2_addr$117 $end
$var wire 5 9! reg_address_out__rs2_addr $end
$var wire 5 :! rd_in $end
$var wire 5 ;! reg_address_out__rd_addr $end
$var wire 5 <! reg_addr_decode__rd_addr $end
$var wire 5 =! reg_addr_decode__rs1_addr $end
$var wire 5 >! reg_addr_decode__rs2_addr $end
$var wire 32 ?! pc_in__pc$124 $end
$var wire 32 @! pc_out__pc $end
$var wire 32 A! PC_in__pc $end
$var wire 1 B! branch_flags_in__beq$127 $end
$var wire 1 C! branch_flags_out__beq $end
$var wire 1 D! branch_flags_in__bge$129 $end
$var wire 1 E! branch_flags_out__bge $end
$var wire 1 F! branch_flags_in__bgeu$131 $end
$var wire 1 G! branch_flags_out__bgeu $end
$var wire 1 H! branch_flags_in__blt$133 $end
$var wire 1 I! branch_flags_out__blt $end
$var wire 1 J! branch_flags_in__bltu$135 $end
$var wire 1 K! branch_flags_out__bltu $end
$var wire 1 L! branch_flags_in__bne$137 $end
$var wire 1 M! branch_flags_out__bne $end
$var wire 32 N! reg_data_in__rs1_data $end
$var wire 32 O! rs_buses__rs1_data $end
$var wire 32 P! reg_data_in__rs2_data $end
$var wire 32 Q! rs_buses__rs2_data $end
$var wire 32 R! rs_data__rs1_data $end
$var wire 32 S! rs_data__rs2_data $end
$var wire 3 T! functions__func3$145 $end
$var wire 3 U! alu_func_out__func3$146 $end
$var wire 7 V! functions__func7$147 $end
$var wire 7 W! alu_func_out__func7$148 $end
$var wire 32 X! pc__pc$149 $end
$var wire 32 Y! pc_out__pc$150 $end
$var wire 32 Z! imm__imm $end
$var wire 32 [! imm_data_out__imm$152 $end
$var wire 32 \! data_regbank__rs1_data $end
$var wire 32 ]! reg_data_out__rs1_data $end
$var wire 32 ^! data_regbank__rs2_data $end
$var wire 32 _! reg_data_out__rs2_data $end
$var wire 1 `! instr_flags__isALUimm$157 $end
$var wire 1 a! instr_flags_out__isALUimm$158 $end
$var wire 1 b! instr_flags__isALUreg$159 $end
$var wire 1 c! instr_flags_out__isALUreg$160 $end
$var wire 1 d! instr_flags__isAUIPC$161 $end
$var wire 1 e! instr_flags_out__isAUIPC$162 $end
$var wire 1 f! instr_flags__isBranch$163 $end
$var wire 1 g! instr_flags_out__isBranch$164 $end
$var wire 1 h! instr_flags__isJAL$165 $end
$var wire 1 i! instr_flags_out__isJAL$166 $end
$var wire 1 j! instr_flags__isJALR$167 $end
$var wire 1 k! instr_flags_out__isJALR$168 $end
$var wire 1 l! instr_flags__isLUI$169 $end
$var wire 1 m! instr_flags_out__isLUI$170 $end
$var wire 1 n! instr_flags__isLoad$171 $end
$var wire 1 o! instr_flags_out__isLoad$172 $end
$var wire 1 p! instr_flags__isStore$173 $end
$var wire 1 q! instr_flags_out__isStore$174 $end
$var wire 1 r! flags_in__isALUimm $end
$var wire 1 s! flags_in__isALUreg $end
$var wire 1 t! flags_in__isAUIPC $end
$var wire 1 u! flags_in__isBranch $end
$var wire 1 v! flags_in__isJAL $end
$var wire 1 w! flags_in__isJALR $end
$var wire 1 x! flags_in__isLUI $end
$var wire 1 y! flags_in__isLoad $end
$var wire 1 z! flags_in__isStore $end
$var wire 1 {! instr_flags_execute__isALUimm $end
$var wire 1 |! instr_flags_execute__isALUreg $end
$var wire 1 }! instr_flags_execute__isAUIPC $end
$var wire 1 ~! instr_flags_execute__isBranch $end
$var wire 1 !" instr_flags_execute__isJAL $end
$var wire 1 "" instr_flags_execute__isJALR $end
$var wire 1 #" instr_flags_execute__isLUI $end
$var wire 1 $" instr_flags_execute__isLoad $end
$var wire 1 %" instr_flags_execute__isStore $end
$var wire 1 &" branch_flags_execute__beq $end
$var wire 1 '" branch_flags_out__beq$194 $end
$var wire 1 (" branch_flags_execute__bge $end
$var wire 1 )" branch_flags_out__bge$196 $end
$var wire 1 *" branch_flags_execute__bgeu $end
$var wire 1 +" branch_flags_out__bgeu$198 $end
$var wire 1 ," branch_flags_execute__blt $end
$var wire 1 -" branch_flags_out__blt$200 $end
$var wire 1 ." branch_flags_execute__bltu $end
$var wire 1 /" branch_flags_out__bltu$202 $end
$var wire 1 0" branch_flags_execute__bne $end
$var wire 1 1" branch_flags_out__bne$204 $end
$var wire 1 2" instr_flags_in__isALUimm$205 $end
$var wire 1 3" instr_flags_in__isALUreg$206 $end
$var wire 1 4" instr_flags_in__isAUIPC$207 $end
$var wire 1 5" instr_flags_in__isBranch$208 $end
$var wire 1 6" instr_flags_in__isJAL$209 $end
$var wire 1 7" instr_flags_in__isJALR$210 $end
$var wire 1 8" instr_flags_in__isLUI$211 $end
$var wire 1 9" instr_flags_in__isLoad$212 $end
$var wire 1 :" instr_flags_in__isStore$213 $end
$var wire 5 ;" rd_execute $end
$var wire 5 <" rd_out $end
$var wire 5 =" rd_in$216 $end
$var wire 32 >" data_buses__A $end
$var wire 32 ?" alu_buses__A $end
$var wire 32 @" data_buses__B $end
$var wire 32 A" alu_buses__B $end
$var wire 32 B" rd_data_in__rd_data $end
$var wire 32 C" rd_bus__rd_data $end
$var wire 32 D" rd_bus__rd_data$223 $end
$var wire 32 E" rd_data_out__rd_data $end
$var wire 5 F" reg_addr__rd_addr$225 $end
$var wire 5 G" rd_out$226 $end
$var wire 5 H" rd_retire $end
$var wire 1 I" instr_flags__isALUimm$228 $end
$var wire 1 J" instr_flags_out__isALUimm$229 $end
$var wire 1 K" instr_flags__isALUreg$230 $end
$var wire 1 L" instr_flags_out__isALUreg$231 $end
$var wire 1 M" instr_flags__isAUIPC$232 $end
$var wire 1 N" instr_flags_out__isAUIPC$233 $end
$var wire 1 O" instr_flags__isBranch$234 $end
$var wire 1 P" instr_flags_out__isBranch$235 $end
$var wire 1 Q" instr_flags__isJAL$236 $end
$var wire 1 R" instr_flags_out__isJAL$237 $end
$var wire 1 S" instr_flags__isJALR$238 $end
$var wire 1 T" instr_flags_out__isJALR$239 $end
$var wire 1 U" instr_flags__isLUI$240 $end
$var wire 1 V" instr_flags_out__isLUI$241 $end
$var wire 1 W" instr_flags__isLoad$242 $end
$var wire 1 X" instr_flags_out__isLoad$243 $end
$var wire 1 Y" instr_flags__isStore$244 $end
$var wire 1 Z" instr_flags_out__isStore$245 $end
$var wire 1 [" instr_flags_retire__isALUimm $end
$var wire 1 \" instr_flags_retire__isALUreg $end
$var wire 1 ]" instr_flags_retire__isAUIPC $end
$var wire 1 ^" instr_flags_retire__isBranch $end
$var wire 1 _" instr_flags_retire__isJAL $end
$var wire 1 `" instr_flags_retire__isJALR $end
$var wire 1 a" instr_flags_retire__isLUI $end
$var wire 1 b" instr_flags_retire__isLoad $end
$var wire 1 c" instr_flags_retire__isStore $end
$var wire 1 d" decode_enable $end
$var wire 1 e" decode_enable$256 $end
$var wire 1 f" decode_mux $end
$var wire 1 g" decode_mux$258 $end
$var wire 1 h" enable $end
$var wire 1 i" execute_enable $end
$var wire 1 j" mux $end
$var wire 1 k" execute_mux $end
$var wire 1 l" enable$263 $end
$var wire 1 m" retire_enable $end
$var wire 1 n" mux$265 $end
$var wire 1 o" retire_mux $end
$var wire 1 p" addrbuilder_enable $end
$var wire 1 q" addr_builder_enable $end
$var wire 1 r" mux$269 $end
$var wire 1 s" addr_builder_mux $end
$var wire 1 t" resetn $end
$var wire 1 u" fetch_enable $end
$scope module addr_builder $end
$var wire 32 $ PC_out__pc $end
$var wire 1 ~ instr_flags__isBranch $end
$var wire 1 !! instr_flags__isJAL $end
$var wire 1 "! instr_flags__isJALR $end
$var wire 32 1! imm_data__imm $end
$var wire 32 A! PC_in__pc $end
$var wire 32 R! rs_data__rs1_data $end
$var wire 1 p" addrbuilder_enable $end
$var wire 1 r" mux $end
$var wire 32 @# saved_pc $end
$upscope $end
$scope module alu $end
$var wire 3 T! functions__func3 $end
$var wire 7 V! functions__func7 $end
$var wire 1 r! flags_in__isALUimm $end
$var wire 1 s! flags_in__isALUreg $end
$var wire 1 t! flags_in__isAUIPC $end
$var wire 1 u! flags_in__isBranch $end
$var wire 1 v! flags_in__isJAL $end
$var wire 1 w! flags_in__isJALR $end
$var wire 1 x! flags_in__isLUI $end
$var wire 1 y! flags_in__isLoad $end
$var wire 1 z! flags_in__isStore $end
$var wire 32 >" data_buses__A $end
$var wire 32 @" data_buses__B $end
$var wire 32 C" rd_bus__rd_data $end
$var wire 1 9# z_flag $end
$var wire 1 :# n_flag $end
$var wire 5 ;# shamt $end
$upscope $end
$scope module decode_latch $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 % pc_in__pc $end
$var wire 32 * imm_data_in__imm $end
$var wire 1 , instr_flags_in__isALUimm $end
$var wire 1 . instr_flags_in__isALUreg $end
$var wire 1 0 instr_flags_in__isAUIPC $end
$var wire 1 2 instr_flags_in__isBranch $end
$var wire 1 4 instr_flags_in__isJAL $end
$var wire 1 6 instr_flags_in__isJALR $end
$var wire 1 8 instr_flags_in__isLUI $end
$var wire 1 : instr_flags_in__isLoad $end
$var wire 1 < instr_flags_in__isStore $end
$var wire 5 P reg_address_in__rd_addr $end
$var wire 5 R reg_address_in__rs1_addr $end
$var wire 5 T reg_address_in__rs2_addr $end
$var wire 3 Y alu_func_in__func3 $end
$var wire 7 [ alu_func_in__func7 $end
$var wire 1 ] branch_flags_in__beq $end
$var wire 1 _ branch_flags_in__bge $end
$var wire 1 a branch_flags_in__bgeu $end
$var wire 1 c branch_flags_in__blt $end
$var wire 1 e branch_flags_in__bltu $end
$var wire 1 g branch_flags_in__bne $end
$var wire 1 j instr_flags_out__isALUimm $end
$var wire 1 l instr_flags_out__isALUreg $end
$var wire 1 n instr_flags_out__isAUIPC $end
$var wire 1 p instr_flags_out__isBranch $end
$var wire 1 r instr_flags_out__isJAL $end
$var wire 1 t instr_flags_out__isJALR $end
$var wire 1 v instr_flags_out__isLUI $end
$var wire 1 x instr_flags_out__isLoad $end
$var wire 1 z instr_flags_out__isStore $end
$var wire 32 0! imm_data_out__imm $end
$var wire 3 3! alu_func_out__func3 $end
$var wire 7 5! alu_func_out__func7 $end
$var wire 5 7! reg_address_out__rs1_addr $end
$var wire 5 9! reg_address_out__rs2_addr $end
$var wire 5 ;! reg_address_out__rd_addr $end
$var wire 32 @! pc_out__pc $end
$var wire 1 C! branch_flags_out__beq $end
$var wire 1 E! branch_flags_out__bge $end
$var wire 1 G! branch_flags_out__bgeu $end
$var wire 1 I! branch_flags_out__blt $end
$var wire 1 K! branch_flags_out__bltu $end
$var wire 1 M! branch_flags_out__bne $end
$var wire 1 d" decode_enable $end
$var wire 1 f" decode_mux $end
$upscope $end
$scope module decoder $end
$var wire 32 ' instr__instr $end
$var wire 1 - alu_flags__isALUimm $end
$var wire 1 / alu_flags__isALUreg $end
$var wire 1 1 alu_flags__isAUIPC $end
$var wire 1 3 alu_flags__isBranch $end
$var wire 1 5 alu_flags__isJAL $end
$var wire 1 7 alu_flags__isJALR $end
$var wire 1 9 alu_flags__isLUI $end
$var wire 1 ; alu_flags__isLoad $end
$var wire 1 = alu_flags__isStore $end
$var wire 5 Q reg_addr__rd_addr $end
$var wire 5 S reg_addr__rs1_addr $end
$var wire 5 U reg_addr__rs2_addr $end
$var wire 3 Z functions__func3 $end
$var wire 7 \ functions__func7 $end
$var wire 1 ^ branch_flags__beq $end
$var wire 1 ` branch_flags__bge $end
$var wire 1 b branch_flags__bgeu $end
$var wire 1 d branch_flags__blt $end
$var wire 1 f branch_flags__bltu $end
$var wire 1 h branch_flags__bne $end
$var wire 1 <# isSystem $end
$upscope $end
$scope module execute_latch $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 i instr_flags_in__isALUimm $end
$var wire 1 k instr_flags_in__isALUreg $end
$var wire 1 m instr_flags_in__isAUIPC $end
$var wire 1 o instr_flags_in__isBranch $end
$var wire 1 q instr_flags_in__isJAL $end
$var wire 1 s instr_flags_in__isJALR $end
$var wire 1 u instr_flags_in__isLUI $end
$var wire 1 w instr_flags_in__isLoad $end
$var wire 1 y instr_flags_in__isStore $end
$var wire 32 /! imm_data_in__imm $end
$var wire 3 2! alu_func_in__func3 $end
$var wire 7 4! alu_func_in__func7 $end
$var wire 5 :! rd_in $end
$var wire 32 ?! pc_in__pc $end
$var wire 1 B! branch_flags_in__beq $end
$var wire 1 D! branch_flags_in__bge $end
$var wire 1 F! branch_flags_in__bgeu $end
$var wire 1 H! branch_flags_in__blt $end
$var wire 1 J! branch_flags_in__bltu $end
$var wire 1 L! branch_flags_in__bne $end
$var wire 32 N! reg_data_in__rs1_data $end
$var wire 32 P! reg_data_in__rs2_data $end
$var wire 3 U! alu_func_out__func3 $end
$var wire 7 W! alu_func_out__func7 $end
$var wire 32 Y! pc_out__pc $end
$var wire 32 [! imm_data_out__imm $end
$var wire 32 ]! reg_data_out__rs1_data $end
$var wire 32 _! reg_data_out__rs2_data $end
$var wire 1 a! instr_flags_out__isALUimm $end
$var wire 1 c! instr_flags_out__isALUreg $end
$var wire 1 e! instr_flags_out__isAUIPC $end
$var wire 1 g! instr_flags_out__isBranch $end
$var wire 1 i! instr_flags_out__isJAL $end
$var wire 1 k! instr_flags_out__isJALR $end
$var wire 1 m! instr_flags_out__isLUI $end
$var wire 1 o! instr_flags_out__isLoad $end
$var wire 1 q! instr_flags_out__isStore $end
$var wire 1 '" branch_flags_out__beq $end
$var wire 1 )" branch_flags_out__bge $end
$var wire 1 +" branch_flags_out__bgeu $end
$var wire 1 -" branch_flags_out__blt $end
$var wire 1 /" branch_flags_out__bltu $end
$var wire 1 1" branch_flags_out__bne $end
$var wire 5 <" rd_out $end
$var wire 1 h" enable $end
$var wire 1 j" mux $end
$upscope $end
$scope module fetch $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 # pc_update__pc $end
$var wire 32 & pc__pc $end
$var wire 32 ( instr__instr $end
$var wire 1 t" resetn $end
$var wire 32 =# mem_r_data $end
$var wire 8 ># mem_r_addr $end
$var wire 32 D# \rdport[0] $end
$var wire 32 E# \rdport[1] $end
$var wire 32 F# \rdport[2] $end
$var wire 32 G# \rdport[3] $end
$var wire 32 H# \rdport[4] $end
$var wire 32 I# \rdport[5] $end
$var wire 32 J# \rdport[6] $end
$var wire 32 K# \rdport[7] $end
$var wire 32 L# \rdport[8] $end
$var wire 32 M# \rdport[9] $end
$var wire 32 N# \rdport[10] $end
$var wire 32 O# \rdport[11] $end
$var wire 32 P# \rdport[12] $end
$var wire 32 Q# \rdport[13] $end
$var wire 32 R# \rdport[14] $end
$var wire 32 S# \rdport[15] $end
$var wire 32 T# \rdport[16] $end
$var wire 32 U# \rdport[17] $end
$var wire 32 V# \rdport[18] $end
$var wire 32 W# \rdport[19] $end
$var wire 32 X# \rdport[20] $end
$var wire 32 Y# \rdport[21] $end
$var wire 32 Z# \rdport[22] $end
$var wire 32 [# \rdport[23] $end
$var wire 32 \# \rdport[24] $end
$var wire 32 ]# \rdport[25] $end
$var wire 32 ^# \rdport[26] $end
$var wire 32 _# \rdport[27] $end
$var wire 32 `# \rdport[28] $end
$var wire 32 a# \rdport[29] $end
$var wire 32 b# \rdport[30] $end
$var wire 32 c# \rdport[31] $end
$var wire 32 d# \rdport[32] $end
$var wire 32 e# \rdport[33] $end
$var wire 32 f# \rdport[34] $end
$var wire 32 g# \rdport[35] $end
$var wire 32 h# \rdport[36] $end
$var wire 32 i# \rdport[37] $end
$var wire 32 j# \rdport[38] $end
$var wire 32 k# \rdport[39] $end
$var wire 32 l# \rdport[40] $end
$var wire 32 m# \rdport[41] $end
$var wire 32 n# \rdport[42] $end
$var wire 32 o# \rdport[43] $end
$var wire 32 p# \rdport[44] $end
$var wire 32 q# \rdport[45] $end
$var wire 32 r# \rdport[46] $end
$var wire 32 s# \rdport[47] $end
$var wire 32 t# \rdport[48] $end
$var wire 32 u# \rdport[49] $end
$var wire 32 v# \rdport[50] $end
$var wire 32 w# \rdport[51] $end
$var wire 32 x# \rdport[52] $end
$var wire 32 y# \rdport[53] $end
$var wire 32 z# \rdport[54] $end
$var wire 32 {# \rdport[55] $end
$var wire 32 |# \rdport[56] $end
$var wire 32 }# \rdport[57] $end
$var wire 32 ~# \rdport[58] $end
$var wire 32 !$ \rdport[59] $end
$var wire 32 "$ \rdport[60] $end
$var wire 32 #$ \rdport[61] $end
$var wire 32 $$ \rdport[62] $end
$var wire 32 %$ \rdport[63] $end
$var wire 32 &$ \rdport[64] $end
$var wire 32 '$ \rdport[65] $end
$var wire 32 ($ \rdport[66] $end
$var wire 32 )$ \rdport[67] $end
$var wire 32 *$ \rdport[68] $end
$var wire 32 +$ \rdport[69] $end
$var wire 32 ,$ \rdport[70] $end
$var wire 32 -$ \rdport[71] $end
$var wire 32 .$ \rdport[72] $end
$var wire 32 /$ \rdport[73] $end
$var wire 32 0$ \rdport[74] $end
$var wire 32 1$ \rdport[75] $end
$var wire 32 2$ \rdport[76] $end
$var wire 32 3$ \rdport[77] $end
$var wire 32 4$ \rdport[78] $end
$var wire 32 5$ \rdport[79] $end
$var wire 32 6$ \rdport[80] $end
$var wire 32 7$ \rdport[81] $end
$var wire 32 8$ \rdport[82] $end
$var wire 32 9$ \rdport[83] $end
$var wire 32 :$ \rdport[84] $end
$var wire 32 ;$ \rdport[85] $end
$var wire 32 <$ \rdport[86] $end
$var wire 32 =$ \rdport[87] $end
$var wire 32 >$ \rdport[88] $end
$var wire 32 ?$ \rdport[89] $end
$var wire 32 @$ \rdport[90] $end
$var wire 32 A$ \rdport[91] $end
$var wire 32 B$ \rdport[92] $end
$var wire 32 C$ \rdport[93] $end
$var wire 32 D$ \rdport[94] $end
$var wire 32 E$ \rdport[95] $end
$var wire 32 F$ \rdport[96] $end
$var wire 32 G$ \rdport[97] $end
$var wire 32 H$ \rdport[98] $end
$var wire 32 I$ \rdport[99] $end
$var wire 32 J$ \rdport[100] $end
$var wire 32 K$ \rdport[101] $end
$var wire 32 L$ \rdport[102] $end
$var wire 32 M$ \rdport[103] $end
$var wire 32 N$ \rdport[104] $end
$var wire 32 O$ \rdport[105] $end
$var wire 32 P$ \rdport[106] $end
$var wire 32 Q$ \rdport[107] $end
$var wire 32 R$ \rdport[108] $end
$var wire 32 S$ \rdport[109] $end
$var wire 32 T$ \rdport[110] $end
$var wire 32 U$ \rdport[111] $end
$var wire 32 V$ \rdport[112] $end
$var wire 32 W$ \rdport[113] $end
$var wire 32 X$ \rdport[114] $end
$var wire 32 Y$ \rdport[115] $end
$var wire 32 Z$ \rdport[116] $end
$var wire 32 [$ \rdport[117] $end
$var wire 32 \$ \rdport[118] $end
$var wire 32 ]$ \rdport[119] $end
$var wire 32 ^$ \rdport[120] $end
$var wire 32 _$ \rdport[121] $end
$var wire 32 `$ \rdport[122] $end
$var wire 32 a$ \rdport[123] $end
$var wire 32 b$ \rdport[124] $end
$var wire 32 c$ \rdport[125] $end
$var wire 32 d$ \rdport[126] $end
$var wire 32 e$ \rdport[127] $end
$var wire 32 f$ \rdport[128] $end
$var wire 32 g$ \rdport[129] $end
$var wire 32 h$ \rdport[130] $end
$var wire 32 i$ \rdport[131] $end
$var wire 32 j$ \rdport[132] $end
$var wire 32 k$ \rdport[133] $end
$var wire 32 l$ \rdport[134] $end
$var wire 32 m$ \rdport[135] $end
$var wire 32 n$ \rdport[136] $end
$var wire 32 o$ \rdport[137] $end
$var wire 32 p$ \rdport[138] $end
$var wire 32 q$ \rdport[139] $end
$var wire 32 r$ \rdport[140] $end
$var wire 32 s$ \rdport[141] $end
$var wire 32 t$ \rdport[142] $end
$var wire 32 u$ \rdport[143] $end
$var wire 32 v$ \rdport[144] $end
$var wire 32 w$ \rdport[145] $end
$var wire 32 x$ \rdport[146] $end
$var wire 32 y$ \rdport[147] $end
$var wire 32 z$ \rdport[148] $end
$var wire 32 {$ \rdport[149] $end
$var wire 32 |$ \rdport[150] $end
$var wire 32 }$ \rdport[151] $end
$var wire 32 ~$ \rdport[152] $end
$var wire 32 !% \rdport[153] $end
$var wire 32 "% \rdport[154] $end
$var wire 32 #% \rdport[155] $end
$var wire 32 $% \rdport[156] $end
$var wire 32 %% \rdport[157] $end
$var wire 32 &% \rdport[158] $end
$var wire 32 '% \rdport[159] $end
$var wire 32 (% \rdport[160] $end
$var wire 32 )% \rdport[161] $end
$var wire 32 *% \rdport[162] $end
$var wire 32 +% \rdport[163] $end
$var wire 32 ,% \rdport[164] $end
$var wire 32 -% \rdport[165] $end
$var wire 32 .% \rdport[166] $end
$var wire 32 /% \rdport[167] $end
$var wire 32 0% \rdport[168] $end
$var wire 32 1% \rdport[169] $end
$var wire 32 2% \rdport[170] $end
$var wire 32 3% \rdport[171] $end
$var wire 32 4% \rdport[172] $end
$var wire 32 5% \rdport[173] $end
$var wire 32 6% \rdport[174] $end
$var wire 32 7% \rdport[175] $end
$var wire 32 8% \rdport[176] $end
$var wire 32 9% \rdport[177] $end
$var wire 32 :% \rdport[178] $end
$var wire 32 ;% \rdport[179] $end
$var wire 32 <% \rdport[180] $end
$var wire 32 =% \rdport[181] $end
$var wire 32 >% \rdport[182] $end
$var wire 32 ?% \rdport[183] $end
$var wire 32 @% \rdport[184] $end
$var wire 32 A% \rdport[185] $end
$var wire 32 B% \rdport[186] $end
$var wire 32 C% \rdport[187] $end
$var wire 32 D% \rdport[188] $end
$var wire 32 E% \rdport[189] $end
$var wire 32 F% \rdport[190] $end
$var wire 32 G% \rdport[191] $end
$var wire 32 H% \rdport[192] $end
$var wire 32 I% \rdport[193] $end
$var wire 32 J% \rdport[194] $end
$var wire 32 K% \rdport[195] $end
$var wire 32 L% \rdport[196] $end
$var wire 32 M% \rdport[197] $end
$var wire 32 N% \rdport[198] $end
$var wire 32 O% \rdport[199] $end
$var wire 32 P% \rdport[200] $end
$var wire 32 Q% \rdport[201] $end
$var wire 32 R% \rdport[202] $end
$var wire 32 S% \rdport[203] $end
$var wire 32 T% \rdport[204] $end
$var wire 32 U% \rdport[205] $end
$var wire 32 V% \rdport[206] $end
$var wire 32 W% \rdport[207] $end
$var wire 32 X% \rdport[208] $end
$var wire 32 Y% \rdport[209] $end
$var wire 32 Z% \rdport[210] $end
$var wire 32 [% \rdport[211] $end
$var wire 32 \% \rdport[212] $end
$var wire 32 ]% \rdport[213] $end
$var wire 32 ^% \rdport[214] $end
$var wire 32 _% \rdport[215] $end
$var wire 32 `% \rdport[216] $end
$var wire 32 a% \rdport[217] $end
$var wire 32 b% \rdport[218] $end
$var wire 32 c% \rdport[219] $end
$var wire 32 d% \rdport[220] $end
$var wire 32 e% \rdport[221] $end
$var wire 32 f% \rdport[222] $end
$var wire 32 g% \rdport[223] $end
$var wire 32 h% \rdport[224] $end
$var wire 32 i% \rdport[225] $end
$var wire 32 j% \rdport[226] $end
$var wire 32 k% \rdport[227] $end
$var wire 32 l% \rdport[228] $end
$var wire 32 m% \rdport[229] $end
$var wire 32 n% \rdport[230] $end
$var wire 32 o% \rdport[231] $end
$var wire 32 p% \rdport[232] $end
$var wire 32 q% \rdport[233] $end
$var wire 32 r% \rdport[234] $end
$var wire 32 s% \rdport[235] $end
$var wire 32 t% \rdport[236] $end
$var wire 32 u% \rdport[237] $end
$var wire 32 v% \rdport[238] $end
$var wire 32 w% \rdport[239] $end
$var wire 32 x% \rdport[240] $end
$var wire 32 y% \rdport[241] $end
$var wire 32 z% \rdport[242] $end
$var wire 32 {% \rdport[243] $end
$var wire 32 |% \rdport[244] $end
$var wire 32 }% \rdport[245] $end
$var wire 32 ~% \rdport[246] $end
$var wire 32 !& \rdport[247] $end
$var wire 32 "& \rdport[248] $end
$var wire 32 #& \rdport[249] $end
$var wire 32 $& \rdport[250] $end
$var wire 32 %& \rdport[251] $end
$var wire 32 && \rdport[252] $end
$var wire 32 '& \rdport[253] $end
$var wire 32 (& \rdport[254] $end
$var wire 32 )& \rdport[255] $end
$scope module rdport $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 32 =# mem_r_data $end
$var wire 8 ># mem_r_addr $end
$var wire 1 ?# mem_r_en $end
$upscope $end
$upscope $end
$scope module imm_builder $end
$var wire 32 ) instr__instr $end
$var wire 32 + imm_data__imm $end
$var wire 1 > instr_flags__isALUimm $end
$var wire 1 @ instr_flags__isAUIPC $end
$var wire 1 A instr_flags__isBranch $end
$var wire 1 B instr_flags__isJAL $end
$var wire 1 C instr_flags__isJALR $end
$var wire 1 D instr_flags__isLUI $end
$var wire 1 E instr_flags__isLoad $end
$var wire 1 F instr_flags__isStore $end
$upscope $end
$scope module opbuilder $end
$var wire 32 X! pc__pc $end
$var wire 32 Z! imm__imm $end
$var wire 32 \! data_regbank__rs1_data $end
$var wire 32 ^! data_regbank__rs2_data $end
$var wire 1 `! instr_flags__isALUimm $end
$var wire 1 b! instr_flags__isALUreg $end
$var wire 1 d! instr_flags__isAUIPC $end
$var wire 1 f! instr_flags__isBranch $end
$var wire 1 h! instr_flags__isJAL $end
$var wire 1 j! instr_flags__isJALR $end
$var wire 1 l! instr_flags__isLUI $end
$var wire 1 n! instr_flags__isLoad $end
$var wire 1 p! instr_flags__isStore $end
$var wire 32 ?" alu_buses__A $end
$var wire 32 A" alu_buses__B $end
$upscope $end
$scope module pipeline $end
$var wire 1 &! instr_flags_decode__isALUimm $end
$var wire 1 '! instr_flags_decode__isALUreg $end
$var wire 1 )! instr_flags_decode__isBranch $end
$var wire 5 =! reg_addr_decode__rs1_addr $end
$var wire 5 >! reg_addr_decode__rs2_addr $end
$var wire 1 {! instr_flags_execute__isALUimm $end
$var wire 1 |! instr_flags_execute__isALUreg $end
$var wire 1 ~! instr_flags_execute__isBranch $end
$var wire 1 &" branch_flags_execute__beq $end
$var wire 1 (" branch_flags_execute__bge $end
$var wire 1 *" branch_flags_execute__bgeu $end
$var wire 1 ," branch_flags_execute__blt $end
$var wire 1 ." branch_flags_execute__bltu $end
$var wire 1 0" branch_flags_execute__bne $end
$var wire 5 ;" rd_execute $end
$var wire 1 e" decode_enable $end
$var wire 1 g" decode_mux $end
$var wire 1 i" execute_enable $end
$var wire 1 k" execute_mux $end
$var wire 1 m" retire_enable $end
$var wire 1 o" retire_mux $end
$var wire 1 q" addr_builder_enable $end
$var wire 1 s" addr_builder_mux $end
$var wire 1 u" fetch_enable $end
$var wire 1 A# alu_flag_z $end
$var wire 1 B# alu_flag_n $end
$var wire 1 C# fetch_mux $end
$upscope $end
$scope module regbank $end
$var wire 5 6! reg_addr__rs1_addr $end
$var wire 5 8! reg_addr__rs2_addr $end
$var wire 32 O! rs_buses__rs1_data $end
$var wire 32 Q! rs_buses__rs2_data $end
$var wire 32 D" rd_bus__rd_data $end
$var wire 5 F" reg_addr__rd_addr $end
$var wire 32 v" $signal $end
$var wire 32 w" $signal$3 $end
$var wire 32 x" $signal$4 $end
$var wire 32 y" $signal$5 $end
$var wire 32 z" $signal$6 $end
$var wire 32 {" $signal$7 $end
$var wire 32 |" $signal$8 $end
$var wire 32 }" $signal$9 $end
$var wire 32 ~" $signal$10 $end
$var wire 32 !# $signal$11 $end
$var wire 32 "# $signal$12 $end
$var wire 32 ## $signal$13 $end
$var wire 32 $# $signal$14 $end
$var wire 32 %# $signal$15 $end
$var wire 32 &# $signal$16 $end
$var wire 32 '# $signal$17 $end
$var wire 32 (# $signal$18 $end
$var wire 32 )# $signal$19 $end
$var wire 32 *# $signal$20 $end
$var wire 32 +# $signal$21 $end
$var wire 32 ,# $signal$22 $end
$var wire 32 -# $signal$23 $end
$var wire 32 .# $signal$24 $end
$var wire 32 /# $signal$25 $end
$var wire 32 0# $signal$26 $end
$var wire 32 1# $signal$27 $end
$var wire 32 2# $signal$28 $end
$var wire 32 3# $signal$29 $end
$var wire 32 4# $signal$30 $end
$var wire 32 5# $signal$31 $end
$var wire 32 6# $signal$32 $end
$var wire 32 7# $signal$33 $end
$var wire 1 8# we $end
$upscope $end
$scope module retire_latch $end
$var wire 1 ! clk $end
$var wire 1 " rst $end
$var wire 1 2" instr_flags_in__isALUimm $end
$var wire 1 3" instr_flags_in__isALUreg $end
$var wire 1 4" instr_flags_in__isAUIPC $end
$var wire 1 5" instr_flags_in__isBranch $end
$var wire 1 6" instr_flags_in__isJAL $end
$var wire 1 7" instr_flags_in__isJALR $end
$var wire 1 8" instr_flags_in__isLUI $end
$var wire 1 9" instr_flags_in__isLoad $end
$var wire 1 :" instr_flags_in__isStore $end
$var wire 5 =" rd_in $end
$var wire 32 B" rd_data_in__rd_data $end
$var wire 32 E" rd_data_out__rd_data $end
$var wire 5 G" rd_out $end
$var wire 1 J" instr_flags_out__isALUimm $end
$var wire 1 L" instr_flags_out__isALUreg $end
$var wire 1 N" instr_flags_out__isAUIPC $end
$var wire 1 P" instr_flags_out__isBranch $end
$var wire 1 R" instr_flags_out__isJAL $end
$var wire 1 T" instr_flags_out__isJALR $end
$var wire 1 V" instr_flags_out__isLUI $end
$var wire 1 X" instr_flags_out__isLoad $end
$var wire 1 Z" instr_flags_out__isStore $end
$var wire 1 l" enable $end
$var wire 1 n" mux $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0!
0"
b1 #
b1 $
b1 %
b1 &
b0 '
b0 (
b0 )
b0 *
b0 +
0,
0-
0.
0/
00
01
02
03
04
05
06
07
08
09
0:
0;
0<
0=
0>
0?
0@
0A
0B
0C
0D
0E
0F
0G
0H
0I
0J
0K
0L
0M
0N
0O
b0 P
b0 Q
b0 R
b0 S
b0 T
b0 U
b0 V
b0 W
b0 X
b0 Y
b0 Z
b0 [
b0 \
0]
0^
0_
0`
0a
0b
0c
0d
0e
0f
0g
0h
0i
0j
0k
0l
0m
0n
0o
0p
0q
0r
0s
0t
0u
0v
0w
0x
0y
0z
0{
0|
0}
0~
0!!
0"!
0#!
0$!
0%!
0&!
0'!
0(!
0)!
0*!
0+!
0,!
0-!
0.!
b0 /!
b0 0!
b0 1!
b0 2!
b0 3!
b0 4!
b0 5!
b0 6!
b0 7!
b0 8!
b0 9!
b0 :!
b0 ;!
b0 <!
b0 =!
b0 >!
b0 ?!
b0 @!
b0 A!
0B!
0C!
0D!
0E!
0F!
0G!
0H!
0I!
0J!
0K!
0L!
0M!
b0 N!
b0 O!
b0 P!
b0 Q!
b0 R!
b0 S!
b0 T!
b0 U!
b0 V!
b0 W!
b0 X!
b0 Y!
b0 Z!
b0 [!
b0 \!
b0 ]!
b0 ^!
b0 _!
0`!
0a!
0b!
0c!
0d!
0e!
0f!
0g!
0h!
0i!
0j!
0k!
0l!
0m!
0n!
0o!
0p!
0q!
0r!
0s!
0t!
0u!
0v!
0w!
0x!
0y!
0z!
0{!
0|!
0}!
0~!
0!"
0""
0#"
0$"
0%"
0&"
0'"
0("
0)"
0*"
0+"
0,"
0-"
0."
0/"
00"
01"
02"
03"
04"
05"
06"
07"
08"
09"
0:"
b0 ;"
b0 <"
b0 ="
b0 >"
b0 ?"
b0 @"
b0 A"
b0 B"
b0 C"
b0 D"
b0 E"
b0 F"
b0 G"
b0 H"
0I"
0J"
0K"
0L"
0M"
0N"
0O"
0P"
0Q"
0R"
0S"
0T"
0U"
0V"
0W"
0X"
0Y"
0Z"
0["
0\"
0]"
0^"
0_"
0`"
0a"
0b"
0c"
1d"
1e"
0f"
0g"
1h"
1i"
0j"
0k"
1l"
1m"
0n"
0o"
1p"
1q"
0r"
0s"
0t"
0u"
b0 v"
b0 w"
b0 x"
b0 y"
b0 z"
b0 {"
b0 |"
b0 }"
b0 ~"
b0 !#
b0 "#
b0 ##
b0 $#
b0 %#
b0 &#
b0 '#
b0 (#
b0 )#
b0 *#
b0 +#
b0 ,#
b0 -#
b0 .#
b0 /#
b0 0#
b0 1#
b0 2#
b0 3#
b0 4#
b0 5#
b0 6#
b0 7#
08#
19#
0:#
b0 ;#
0<#
b0 =#
b1 >#
1?#
b0 @#
0A#
0B#
0C#
b1000000000000000 D#
b111110100000000000000010010011 E#
b111110100000000000000010010011 F#
b11111110001000001000111011100011 G#
b11111110000100000001111111100011 H#
b1000000000000000 I#
b1000000000000000 J#
b1000000000000000 K#
b1000000000000000 L#
b1000000000000000 M#
b1000000000000000 N#
b1000000000000000 O#
b1000000000000000 P#
b1000000000000000 Q#
b1000000000000000 R#
b1000000000000000 S#
b1000000000000000 T#
b1000000000000000 U#
b1000000000000000 V#
b1000000000000000 W#
b1000000000000000 X#
b1000000000000000 Y#
b1000000000000000 Z#
b1000000000000000 [#
b1000000000000000 \#
b1000000000000000 ]#
b1000000000000000 ^#
b1000000000000000 _#
b1000000000000000 `#
b1000000000000000 a#
b1000000000000000 b#
b1000000000000000 c#
b1000000000000000 d#
b1000000000000000 e#
b1000000000000000 f#
b1000000000000000 g#
b1000000000000000 h#
b1000000000000000 i#
b1000000000000000 j#
b1000000000000000 k#
b1000000000000000 l#
b1000000000000000 m#
b1000000000000000 n#
b1000000000000000 o#
b1000000000000000 p#
b1000000000000000 q#
b1000000000000000 r#
b1000000000000000 s#
b1000000000000000 t#
b1000000000000000 u#
b1000000000000000 v#
b1000000000000000 w#
b1000000000000000 x#
b1000000000000000 y#
b1000000000000000 z#
b1000000000000000 {#
b1000000000000000 |#
b1000000000000000 }#
b1000000000000000 ~#
b1000000000000000 !$
b1000000000000000 "$
b1000000000000000 #$
b1000000000000000 $$
b1000000000000000 %$
b1000000000000000 &$
b1000000000000000 '$
b1000000000000000 ($
b1000000000000000 )$
b1000000000000000 *$
b1000000000000000 +$
b1000000000000000 ,$
b1000000000000000 -$
b1000000000000000 .$
b1000000000000000 /$
b1000000000000000 0$
b1000000000000000 1$
b1000000000000000 2$
b1000000000000000 3$
b1000000000000000 4$
b1000000000000000 5$
b1000000000000000 6$
b1000000000000000 7$
b1000000000000000 8$
b1000000000000000 9$
b1000000000000000 :$
b1000000000000000 ;$
b1000000000000000 <$
b1000000000000000 =$
b1000000000000000 >$
b1000000000000000 ?$
b1000000000000000 @$
b1000000000000000 A$
b1000000000000000 B$
b1000000000000000 C$
b1000000000000000 D$
b1000000000000000 E$
b1000000000000000 F$
b1000000000000000 G$
b1000000000000000 H$
b1000000000000000 I$
b1000000000000000 J$
b1000000000000000 K$
b1000000000000000 L$
b1000000000000000 M$
b1000000000000000 N$
b1000000000000000 O$
b1000000000000000 P$
b1000000000000000 Q$
b1000000000000000 R$
b1000000000000000 S$
b1000000000000000 T$
b1000000000000000 U$
b1000000000000000 V$
b1000000000000000 W$
b1000000000000000 X$
b1000000000000000 Y$
b1000000000000000 Z$
b1000000000000000 [$
b1000000000000000 \$
b1000000000000000 ]$
b1000000000000000 ^$
b1000000000000000 _$
b1000000000000000 `$
b1000000000000000 a$
b1000000000000000 b$
b1000000000000000 c$
b1000000000000000 d$
b1000000000000000 e$
b1000000000000000 f$
b1000000000000000 g$
b1000000000000000 h$
b1000000000000000 i$
b1000000000000000 j$
b1000000000000000 k$
b1000000000000000 l$
b1000000000000000 m$
b1000000000000000 n$
b1000000000000000 o$
b1000000000000000 p$
b1000000000000000 q$
b1000000000000000 r$
b1000000000000000 s$
b1000000000000000 t$
b1000000000000000 u$
b1000000000000000 v$
b1000000000000000 w$
b1000000000000000 x$
b1000000000000000 y$
b1000000000000000 z$
b1000000000000000 {$
b1000000000000000 |$
b1000000000000000 }$
b1000000000000000 ~$
b1000000000000000 !%
b1000000000000000 "%
b1000000000000000 #%
b1000000000000000 $%
b1000000000000000 %%
b1000000000000000 &%
b1000000000000000 '%
b1000000000000000 (%
b1000000000000000 )%
b1000000000000000 *%
b1000000000000000 +%
b1000000000000000 ,%
b1000000000000000 -%
b1000000000000000 .%
b1000000000000000 /%
b1000000000000000 0%
b1000000000000000 1%
b1000000000000000 2%
b1000000000000000 3%
b1000000000000000 4%
b1000000000000000 5%
b1000000000000000 6%
b1000000000000000 7%
b1000000000000000 8%
b1000000000000000 9%
b1000000000000000 :%
b1000000000000000 ;%
b1000000000000000 <%
b1000000000000000 =%
b1000000000000000 >%
b1000000000000000 ?%
b1000000000000000 @%
b1000000000000000 A%
b1000000000000000 B%
b1000000000000000 C%
b1000000000000000 D%
b1000000000000000 E%
b1000000000000000 F%
b1000000000000000 G%
b1000000000000000 H%
b1000000000000000 I%
b1000000000000000 J%
b1000000000000000 K%
b1000000000000000 L%
b1000000000000000 M%
b1000000000000000 N%
b1000000000000000 O%
b1000000000000000 P%
b1000000000000000 Q%
b1000000000000000 R%
b1000000000000000 S%
b1000000000000000 T%
b1000000000000000 U%
b1000000000000000 V%
b1000000000000000 W%
b1000000000000000 X%
b1000000000000000 Y%
b1000000000000000 Z%
b1000000000000000 [%
b1000000000000000 \%
b1000000000000000 ]%
b1000000000000000 ^%
b1000000000000000 _%
b1000000000000000 `%
b1000000000000000 a%
b1000000000000000 b%
b1000000000000000 c%
b1000000000000000 d%
b1000000000000000 e%
b1000000000000000 f%
b1000000000000000 g%
b1000000000000000 h%
b1000000000000000 i%
b1000000000000000 j%
b1000000000000000 k%
b1000000000000000 l%
b1000000000000000 m%
b1000000000000000 n%
b1000000000000000 o%
b1000000000000000 p%
b1000000000000000 q%
b1000000000000000 r%
b1000000000000000 s%
b1000000000000000 t%
b1000000000000000 u%
b1000000000000000 v%
b1000000000000000 w%
b1000000000000000 x%
b1000000000000000 y%
b1000000000000000 z%
b1000000000000000 {%
b1000000000000000 |%
b1000000000000000 }%
b1000000000000000 ~%
b1000000000000000 !&
b1000000000000000 "&
b1000000000000000 #&
b1000000000000000 $&
b1000000000000000 %&
b1000000000000000 &&
b1000000000000000 '&
b1000000000000000 (&
b1000000000000000 )&
$end
#500000000
1!
b1 @!
b111110100000000000000010010011 =#
b1 A!
b1 ?!
b111110100000000000000010010011 (
b111110100000000000000010010011 )
b10 $
b111110100000000000000010010011 '
b1 Q
b10 #
1-
b1000 U
b11111 \
1>
b11111 [
b1 P
1,
b1 V
b1000 T
1G
b1000 X
b10 &
b1111101000 +
b10 %
b10 >#
b1111101000 *
18#
#1000000000
0!
#1500000000
1!
b10 @!
b1000 9!
b1111101000 0!
b1 Y!
b1 ;!
1j
b11111 5!
b10 A!
b1 X!
b1000 8!
1&!
b1 :!
1{
b1111101000 /!
b1 <!
b1111101000 1!
1i
b1000 >!
b11111 4!
b10 ?!
b11 $
b11 #
b11 &
b11 %
b11 >#
#2000000000
0!
#2500000000
1!
1a!
b11111 W!
b11 @!
b1 <"
b1111101000 [!
b11111110001000001000111011100011 =#
b10 Y!
b11 A!
b10 X!
1r!
b11111110001000001000111011100011 (
b1111101000 Z!
b1 ;"
b1 ="
1{!
1`!
12"
b11 ?!
b11111 V!
0i"
b11111110001000001000111011100011 '
0m"
b11111110001000001000111011100011 )
b100 $
0q"
b1111101000 A"
0e"
b11101 Q
b100 #
13
0p"
b11111111111111111111111111100010 +
0d"
b1 S
0-
b10 U
0h"
b1111111 \
b1111101000 @"
1d
0l"
0>
b11111111111111111111111111100010 *
12
b11101 P
b1111111 [
0,
1c
b1 R
b11101 V
b10 T
1A
b1 W
0G
b10 X
b11 $
b100 &
1J
b1111101000 C"
b11 #
b11111111111111111111111111111100 +
b100 %
b100 >#
09#
b1111101000 B"
b11111111111111111111111111111100 *
b11 &
b11 %
b11 >#
#3000000000
0!
#3500000000
1!
#4000000000
0!
#4500000000
1!
#5000000000
0!
#5500000000
1!
#6000000000
0!
#6500000000
1!
#7000000000
0!
#7500000000
1!
#8000000000
0!
#8500000000
1!
#9000000000
0!
#9500000000
1!
#10000000000
0!
#10500000000
1!
#11000000000
0!
#11500000000
1!
#12000000000
0!
#12500000000
1!
#13000000000
0!
#13500000000
1!
#14000000000
0!
#14500000000
1!
#15000000000
0!
#15500000000
1!
#16000000000
0!
#16500000000
1!
#17000000000
0!
#17500000000
1!
#18000000000
0!
#18500000000
1!
#19000000000
0!
#19500000000
1!
#20000000000
